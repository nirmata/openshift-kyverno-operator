apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: manager-role
rules:
##
## Base operator rules
##
# We need to get namespaces so the operator can read namespaces to ensure they exist
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
# We need to manage Helm release secrets
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - "*"
# We need to create events on CRs about things happening during reconciliation
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create

##
## Rules for security.nirmata.io/v1alpha1, Kind: EnterpriseKyverno
##
- apiGroups:
  - security.nirmata.io
  resources:
  - enterprisekyvernoes
  - enterprisekyvernoes/status
  - enterprisekyvernoes/finalizers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- verbs:
  - "*"
  apiGroups:
  - "apiextensions.k8s.io"
  resources:
  - "customresourcedefinitions"
- verbs:
  - "*"
  apiGroups:
  - "rbac.authorization.k8s.io"
  resources:
  - "clusterrolebindings"
  - "clusterroles"
- verbs:
  - "*"
  apiGroups:
  - "rbac.authorization.k8s.io"
  resources:
  - "rolebindings"
  - "roles"
- verbs:
  - "*"
  apiGroups:
  - "apps"
  resources:
  - "deployments"
- verbs:
  - "*"
  apiGroups:
  - "security.nirmata.io"
  resources:
  - "kyvernooperators"
- verbs:
  - "*"
  apiGroups:
  - ""
  resources:
  - "configmaps"
  - "secrets"
  - "serviceaccounts"
  - "services"

#+kubebuilder:scaffold:rules
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kyverno:leaderelection
  namespace: kyverno
  labels:
    app.kubernetes.io/component: kyverno
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kyverno
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: "v1.5.0"
    helm.sh/chart: kyverno-v1.5.0
    app: kyverno
rules:
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - create
      - delete
      - get
      - patch
      - update
